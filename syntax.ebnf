expression     → assignment ;
assignment     → ( call "." )? IDENTIFIER "=" assignment
               | logic_or;
logic_or       → logic_and ("or" logic_and)*;
logic_and      → equality ("and" equality)*;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | call ;
call           → primary ( "(" arguments? ")" | "." IDENTIFIER)*;
arguments      → expression ("," expression)*;
primary        → NUMBER | STRING | "false" | "true" | "nil"
               | "(" expression ")"
               | IDENTIFIER
               | "super" "." IDENTIFIER
               | funAnon ;
funAnon        → "fun" "(" parameters? ")" block ;


program        → declaration* EOF;
declaration    → classDecl | funDecl | varDecl | statement;
classDecl      → "class" IDENTIFIER ( "<" IDENTIFIER )? "{" methodDecl* "}" ;
methodDecl     → "class"? (function | getter);
funDecl        → "fun" function ;
function       → IDENTIFIER "(" parameters? ")" block ;
getter         → IDENTIFIER block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;
varDecl        → "var" IDENTIFIER ("=" expression)? ";";
statement      → exprStmt 
                | forStmt
                | ifStmt
                | returnStmt
                | whileStmt
                | bloexprStmtck;
exprStmt       → expression ";";
forStmt        → "for" "(" (varDecl | exprStmt | ";") expression? ";" expression? ")" statement;
ifStmt         → "if" "(" expression ")" statement ("else" statement)?;
returnStmt     → "return" expression? ";" ;
whileStmt      → ("while" | "until") "(" expression ")" statement;
block          → "{" declaration* "}";